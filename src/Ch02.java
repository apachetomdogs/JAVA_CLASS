
public class Ch02 {
	public static void main(String[] args) {
		
		// 01 진수
		// 진수 (진법) : 정수를 표현할 떄 사용되는 수 표현방법.
		// JAVA는 기본적으로 10진수를 사용, 정수 리터럴을 작성할 때 10진수가 기본적으로 사용됨.
		
		
		// 02 서식문자를 사용한 진수 표현법
//		System.out.println("--------------- 진수와 서식문자 예제 ---------------");
//		//10진수로 변환
//		System.out.printf("10진수 : %d\n", 0b10101101);	//0b	: 2진수
//		System.out.printf("10진수 : %d\n", 173);			//		: 10진수
//		System.out.printf("10진수 : %d\n", 0255);			//0		: 8진수
//		System.out.printf("10진수 : %d\n", 0xAD);			//0x	: 16진수
//		System.out.println();
//		
//		//8진수로 변환
//		System.out.printf("08진수 : %o\n", 0b10101101);	//0b	: 2진수
//		System.out.printf("08진수 : %o\n", 173);			//		: 10진수
//		System.out.printf("08진수 : %o\n", 0255);			//0		: 8진수
//		System.out.printf("08진수 : %o\n", 0xAD);			//0x	: 16진수
//		System.out.println();
//		//16진수로 변환
//		System.out.printf("16진수 : %x\n", 0b10101101);	//0b	: 2진수
//		System.out.printf("16진수 : %x\n", 173);			//		: 10진수
//		System.out.printf("16진수 : %X\n", 0255);			//0		: 8진수
//		System.out.printf("16진수 : %X\n", 0xAD);			//0x	: 16진수
//		System.out.println();
		
		// ==> 컴퓨터는 내부적으로 모든 값을 이진(binary) 데이터로 저장하고 있음.
		//		우리가 보는 것은 다양한 진법의 리터럴을 통해 그 값을 해석한 것뿐임. == 형식 지정자(서식문자)에 맞게 표현한 것 뿐임.
		

		
		// 03 이진 데이터(2진수)의 양수 표현 방식
		
		// 컴퓨터는 10진수 데이터를 2진수 데이터로 변환하여 저장되는데
		// 이때 2진수로 변환된 데이터 하나를 담는 최소 공간단위 == 비트(bit)

		// ###
		// 1 byte == 8 bit
		// ###
		
		// 2진수를 10진수로 변환할 때 계산하는 방법
		// 1	1	1	1	1	1	1	1
		// 128	64	32	16	8	4	2	1 ==> 255
		
		// 10진수	->		2진수
		// 
		// 1		->		1			1비트가 사용됨.
		// 2		->		10			2비트가 사용됨.
		// 3		->		11			2비트가 사용됨.
		// 4		->		100			3비트가 사용됨.
		// 5		->		101			3비트가 사용됨.
		// 8		->		1000		4비트가 사용됨.
		// 31		->		11111		5비트가 사용됨.
		// 44		->		101100		6비트가 사용됨.
		// 112		->		1110000		7비트가 사용됨.
		// 255		->		11111111	8비트가 사용됨.
		// 256		->		100000000	9비트가 사용됨.
		

		// 10진수를 2진수로 변환하는 문제!
		// 
		// 10		->		???
		// 12		->		???
		// 20		->		???
		// 59		->		???
		// 72		->		???
		// 42		->		???
		// 160		->		??? 
		
		

		// 10		->		1010
		// 12		->		1100
		// 20		->		10100
		// 59		->		111011
		// 72		->		1001000
		// 42		->		101010
		// 160		->		10100000
		
		



		// 2진수를 10진수로 변환하는 문제!
		// 
		// 11000001	->		???
		// 01011101	->		???
		// 00001011	->		???
		// 10101110 ->		???
		// 11101101 ->		???
		// 10111010 ->		???
		// 11010101 ->		???
		// 01110101 ->		???
		
		


		// 11000001	->		193
		// 01011101	->		93
		// 00001011	->		11
		// 10101110 ->		174
		// 11101101 ->		237
		// 10111010 ->		186
		// 11010101 ->		213
		// 01110101 ->		117
		
		
		
		
		// 04 이진 데이터(2진수)의 음수 표현 방식
		// CPU는 애초에 가연산에 특화되어 있는 명령 처리 장치이다.
		
		// 부호비트가 0이면 양수 <-------------------> 1이면 음수
		
		// 컴퓨터의 뺄셈 처리는 '보수' 개념을 이용해서 음수를 양수화 하여
		// 계산하는데 이는 뺄셈 결과와 동일한 결과가 나옴.
		
		// A - B는 A + (B의 보수)로 바꾸어 계산함.
		
		
		// 10 - 4 = 6
		// 10 + 6 = 1 6
		
		
		// 5 - 5 = 0
		// 5 + (5에 대한 2의 보수) 
		
		
		
		
		// ## 2의 보수와 1의 보수 ##
		
		// 2의 보수 == 1의 보수 + 1
		
		// 1)) 1의 보수를 구하는 방법
		// 1. 5에 대해서 이진수를 구하기 ==> 101
		// 2. 비트를 반전 == 1의 보수 ==> 010
		
		// 2)) 2의 보수를 구하는 방법
		// 1. 1의 보수 + 1 ==> 010 + 001 ==> 011
		
		// 3)) 계산하기
		// 5 - 5 = 0
		// 101 - 101
		// 101 + (101에 대한 2의 보수)
		// 101 + 011 = 1 000		--> 자릿수가 증가했네!? --> 자릿수를 버리자
		// 			 = 000 = 0
		
		
		
		
		
		
		
		
		
		
	}
}
